from typing import Optional

from langchain.agents import AgentExecutor
from langchain.agents.format_scratchpad import format_to_openai_functions
from langchain.agents.output_parsers import OpenAIFunctionsAgentOutputParser
from langchain.chat_models import ChatOpenAI
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from openai import OpenAI

from xhs import XhsClient
from xhs_gpt.utils import unzip_prompt_run


class GetNote:
    tool = {
        "name": "get_note",
        "description": "Get a specific note detail on Xiaohongshu. Require login.",
        "parameters": {"type": "object",
                       "properties": {
                           "note_id": {
                               "type": "string",
                               "description": "id of the specific note"
                           },
                           "token_file": {
                               "type": "string",
                               "description": "generated by `login` tool"
                           },
                       },
                       'required': ['id', 'token_file']
                       }
    }

    @classmethod
    def run(cls, note_id, token_file):
        from xhs_gpt.utils import sign
        with open(token_file, 'r') as f:
            cookie = f.read()
        xhs_client = XhsClient(cookie=cookie, sign=sign)
        note = xhs_client.get_note_by_id(note_id)
        return {
            # "metadata": note,  # metadata too long
            "summary": summary_note(note)
        }


def summary_note(note: dict):
    text = f"""{note["title"]}
    
{note['desc']}

{[i['name'] for i in note['tag_list']]}"""
    image_urls = [i['info_list'][0]['url'] for i in note['image_list']]

    client = OpenAI()
    content = [{"type": "text", "text": text}]
    content += [
        {
            "type": "image_url",
            "image_url": {
                "url": i,
            },
        } for i in image_urls
    ]
    response = client.chat.completions.create(
        model="gpt-4-vision-preview",
        messages=[
            {"role": "system",
             "content": "User will display images and text from a post on Xiaohongshu platform in China. First breifly summarize the post combining text and images, then conclude with features of this post. Also mention the highlight if it has one. Always response in English unless you need to quote specific foriegn words."},
            {
                "role": "user",
                "content": content
            }
        ],
        max_tokens=500,
    )
    return response.choices[0].message.content


get_note_tool_prompts, get_note_tool_runs = unzip_prompt_run([
    GetNote,
])

get_note_agent_prompt = ChatPromptTemplate.from_messages(
    [
        ("system",
         """You are a Xiaohongshu Assistant. Help user to get the content of a sprcific note. token_file: {token_file}"""),
        ("user", "{input}"),
        MessagesPlaceholder(variable_name="agent_scratchpad"),
    ]
)

llm = ChatOpenAI(temperature=.5, model="gpt-3.5-turbo-1106")
get_note_llm = llm.bind(functions=get_note_tool_prompts)
from langchain.pydantic_v1 import BaseModel


class GetNoteInput(BaseModel):
    note_id: str
    token_file: Optional[str | None] = None


class GetNoteOutput(BaseModel):
    output: str


get_note_agent = (
        {
            "note_id": lambda x: x["note_id"],
            "token_file": lambda x: x["token_file"] if 'token_file' in x else None,
            "agent_scratchpad": lambda x: format_to_openai_functions(
                x["intermediate_steps"]
            ),
        }
        | get_note_agent_prompt
        | get_note_llm
        | OpenAIFunctionsAgentOutputParser()
)

get_note_agent_executor = AgentExecutor(
    agent=get_note_agent, tools=get_note_tool_runs, max_iterations=3, early_stopping_method="generate",
    return_intermediate_steps=True,
    verbose=True
).with_types(input_type=GetNoteInput, output_type=GetNoteOutput)
if __name__ == '__main__':
    print(get_note_agent_executor.invoke(
        {'note_id': '654dc312000000001f02c3e8', 'token_file': '/tmp/xhs_login.cookie'}))  # replace with your token_file
