from typing import Optional

from langchain.agents import AgentExecutor
from langchain.agents.format_scratchpad import format_to_openai_functions
from langchain.agents.output_parsers import OpenAIFunctionsAgentOutputParser
from langchain.chat_models import ChatOpenAI
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder

from xhs import XhsClient, FeedType
from xhs_gpt.utils import unzip_prompt_run


class GetFeed:
    feed_map = {
        'personal_recommend': FeedType.RECOMMEND,
        'fashion': FeedType.FASION,
        'food': FeedType.FOOD,
        'cosmetics': FeedType.COSMETICS,
        'movie': FeedType.MOVIE,
        'career': FeedType.CAREER,
        'emotion': FeedType.EMOTION,
        'house': FeedType.HOURSE,
        'game': FeedType.GAME,
        'travel': FeedType.TRAVEL,
        'fitness': FeedType.FITNESS,
    }
    tool = {
        "name": "get_feed",
        "description": "Search notes by feed on Xiaohongshu. Require login.",
        "parameters": {"type": "object",
                       "properties": {
                           "feed_type": {
                               "type": "string",
                               "description": "topic of the specific feed",
                               "enum": list(feed_map.keys())
                           },
                           "token_file": {
                               "type": "string",
                               "description": "generated by `login` tool"
                           },
                       },
                       'required': ['feed_type', "token_file"]
                       }
    }

    @classmethod
    def run(cls, feed_type, token_file):
        feed_type = cls.feed_map.get(feed_type, FeedType.RECOMMEND)  # 用个人推荐做保底
        from xhs_gpt.utils import sign
        with open(token_file, 'r') as f:
            cookie = f.read()
        xhs_client = XhsClient(cookie=cookie, sign=sign)
        data = xhs_client.get_home_feed(feed_type)
        formatted = [
            {
                'liked_count': i['note_card']['interact_info']['liked_count'],
                'user_name': i['note_card']['user']['nick_name'],
                'title': i['note_card']['display_title'],
                'note_id': i['id']
            }

            for i in data['items']
        ]
        return formatted[:10]  # limit 10


get_feed_tool_prompts, get_feed_tool_runs = unzip_prompt_run([
    GetFeed,
])

get_feed_agent_prompt = ChatPromptTemplate.from_messages(
    [
        ("system",
         """You are a Xiaohongshu Assistant. Help user to get notes in specific feed. token_file: {token_file}"""),
        ("user", "{feed_type}"),
        MessagesPlaceholder(variable_name="agent_scratchpad"),
    ]
)

llm = ChatOpenAI(temperature=.5, model="gpt-3.5-turbo-1106")
get_feed_llm = llm.bind(functions=get_feed_tool_prompts)
get_feed_agent = (
        {
            "feed_type": lambda x: x["feed_type"],
            "token_file": lambda x: x["token_file"] if 'token_file' in x else None,
            "agent_scratchpad": lambda x: format_to_openai_functions(
                x["intermediate_steps"]
            ),
        }
        | get_feed_agent_prompt
        | get_feed_llm
        | OpenAIFunctionsAgentOutputParser()
)
from langchain.pydantic_v1 import BaseModel


class GetFeedInput(BaseModel):
    feed_type: str
    token_file: Optional[str | None] = None


class GetFeedOutput(BaseModel):
    output: str


get_feed_agent_executor = AgentExecutor(
    agent=get_feed_agent, tools=get_feed_tool_runs, max_iterations=3, early_stopping_method="generate",
    return_intermediate_steps=True,
    verbose=True
).with_types(input_type=GetFeedInput, output_type=GetFeedOutput)

if __name__ == '__main__':
    print(get_feed_agent_executor.invoke(
        {'feed_type': '游戏领域', 'token_file': '/tmp/xhs_login.cookie'}))  # replace with your token_file
